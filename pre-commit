#!/usr/bin/python3
import json
import os
import sys
import collections
import threading
import time
gitstatus = "git submodule status"
gettag = "git ls-remote --tags https://cr.deepin.io/"

listjson = os.popen("%s"%gitstatus).readlines()
#jsonlist = collections.OrderedDict()
jsonlistnew = collections.OrderedDict()
jsonlist = {}

def store(data):
    with open('project_list.json','w+') as json_file:
        json_file.write(json.dumps(data, indent=4, sort_keys=False, ensure_ascii=False))
        json_file.close()

def getmes(mes):
        commit = mes[1:41]
        tag = ""
        pro = mes.split('/')[1].split(' ')[0].strip('\n')
        if "dde" in pro:
            tags = os.popen("%sdde/%s | grep %s"%(gettag, pro, commit)).readline()
            if tags == "":
                print("%s项目submodule引用不在tag上面,请确定提交内容是否正确"%pro)
            else:
                tag = tags.split('^{}')[0].split("tags/")[1].strip('\n')
        elif "lastore" in pro:
            tags = os.popen("%slastore/%s | grep %s"%(gettag, pro, commit)).readline()
            if tags == "":
                print("%s项目submodule引用不在tag上面,请确定提交内容是否正确"%pro)
            else:
                tag = tags.split('^{}')[0].split("tags/")[1].strip('\n')
        elif "appstore" in pro:
            tags = os.popen("%sdstore/%s | grep %s"%(gettag, pro, commit)).readline()
            if tags == "":
                print("%s项目submodule引用不在tag上面,请确定提交内容是否正确"%pro)
            else:
                tag = tags.split('^{}')[0].split("tags/")[1].strip('\n')
        else:
            tags = os.popen("%s%s | grep %s"%(gettag, pro, commit)).readline()
            if tags == "":
                print("%s项目submodule引用不在tag上面,请确定提交内容是否正确"%pro)
            else:
                tag = tags.split('^{}')[0].split("tags/")[1].strip('\n')
        dist = collections.OrderedDict()
        dist["commit"]=commit
        dist["tag"]=tag
        jsonlist[pro]=dist

def main():
    threads = []
    for i in listjson:
        thread = threading.Thread(target=getmes, args=(i,))
        threads.append(thread)
    for t in threads:
        t.setDaemon(True)
        t.start()
    t.join()
    pro = sorted(jsonlist.keys())
    for m in pro:
        jsonlistnew[m] = jsonlist[m]
    store(jsonlistnew)

if __name__=='__main__':
    main()
    os.system("git add ./project_list.json")

